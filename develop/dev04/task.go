package main

import (
	"slices"
	"strings"

	"golang.org/x/exp/maps"
)

/*
=== Поиск анаграмм по словарю ===

Напишите функцию поиска всех множеств анаграмм по словарю.
Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.

Входные данные для функции: ссылка на массив - каждый элемент которого - слово на русском языке в кодировке utf8.
Выходные данные: Ссылка на мапу множеств анаграмм.
Ключ - первое встретившееся в словаре слово из множества
Значение - ссылка на массив, каждый элемент которого, слово из множества. Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.

Программа должна проходить все тесты. Код должен проходить проверки go vet и golint.
*/

func sortString(in string) string {
	data := []rune(in)
	slices.Sort(data)
	return string(data)
}

func FindAnagrams(words []string) map[string][]string {
	keyConv := map[string]string{}
	// мапа мап, чтобы исключить повторения
	temp := map[string]map[string]struct{}{}
	res := map[string][]string{}

	for i := range words {
		word := strings.ToLower(words[i])
		// формирование ключа как отсортированной строки по символам
		k := sortString(word)
		// Добавление в переводчик ключей нового элемента
		if _, ex := keyConv[k]; !ex {
			keyConv[k] = word
			temp[k] = map[string]struct{}{}
		}
		temp[k][word] = struct{}{}
	}
	// Формирование результата
	for k, v := range temp {
		// Пропуск множеста из 1 элемента
		if len(v) == 1 {
			continue
		}
		// Получение всех слов множества
		vals := maps.Keys(temp[k])
		slices.Sort(vals)
		// Возвращение ключа в нормальный вид
		res[keyConv[k]] = vals
	}

	return res
}

func main() {

}
